<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>xxaxx007 的日常</title>
    <link>https://xxaxx007.github.io/</link>
    <description>Recent content on xxaxx007 的日常</description>
    <image>
      <url>https://xxaxx007.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://xxaxx007.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 16 Dec 2022 18:08:12 +0800</lastBuildDate><atom:link href="https://xxaxx007.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learn Vim</title>
      <link>https://xxaxx007.github.io/blog/learn-vim/</link>
      <pubDate>Fri, 16 Dec 2022 18:08:12 +0800</pubDate>
      
      <guid>https://xxaxx007.github.io/blog/learn-vim/</guid>
      <description>第0章 请先阅读 为什么写这本教程 有很多途径可以学习Vim:vimtutor就是一个很好的途径，另外还有Vim自带的帮助手册（:help查看）包含了所有需要的参考信息。
但是在日常使用中，对于绝大部分用户的需求而言，vimtutor讲得太浅不能满足需要，而:help所提供的信息又有很多是用不上的。本指南尝试在两者之间搭一座桥，仅重点介绍关键功能，使您尽可能在最短的时间内掌握Vim中最有用的知识。
绝大部分情况下，您并不会使用到Vim100%的功能。您可能仅仅需要掌握其中20%就可以成为一名娴熟的Vim用户。本指南将为您展示Vim中最有用的功能。
本指南带有作者强烈的个人观点。它涵盖了作者在使用Vim的过程中经常用到的技巧。章节按照作者认为的，最适合初学者最符合逻辑的顺序排列。
本指南包含大量示例。当学习一个新技能时，示例是不可缺少的，大量的示例可以更有效的巩固所学概念。
部分读者可能好奇为什么要学习Vimscript？我刚使用Vim时，仅仅满足于知道如何使用Vim。随着时间推移，我越来越需要使用Vimscript去写一些自定义命令，以满足特殊的编辑需要。在您使用Vim的过程中，您早晚会接触Vimscript。所以为什么不早点学呢？Vimscript是一门小巧的脚本语言，仅需要本指南的四个章节，您就可以学到它的基础知识。
您当然可以继续使用Vim而不了解任何Vimscript知识，但了解它可以使您更加擅长Vim。
本指南同时为初学者和高级Vim用户撰写。它从宽泛而简单的概念开始讲，最后落在特殊的、进阶的技巧上。如果您已经是一名进阶用户，我还是鼓励您从头到尾阅读本指南，因为您将了解到一些新的东西。
如何从其他编辑器过渡到Vim 学习Vim的过程虽然很困难,但很具有成就感。有两种方法去学习Vim：
强制转换地使用Vim 循序渐进地使用Vim 强制转换为Vim意味着从现在开始只使用Vim，停止使用您以前使用的任何编辑器/IDE。本方法的缺点是在前一周或两周，您将面临编辑效率的严重下降。如果您是一名专职程序员，本方法可能不太行得通。这也是为什么对于大部分读者而言，我认为过渡到Vim最好是循序渐进地使用Vim。
想要循序渐进地使用Vim，应该在最开始的两个星期，每天花1个小时使用Vim作为您的编辑器，而剩下的时间您可以继续使用其他编辑器。许多现代编辑器都带有Vim插件。我刚开始时，每天花1个小时使用VSCode的Vim插件。逐渐地，我增加使用Vim插件的时间，直到最终完全使用Vim插件。记住，这些插件仅仅模拟了Vim中的一小部分功能。要想体验Vim中比如Vimscript、命令行命令（Ex模式）、以及外部集成命令的强大功能，您必须使用Vim自身。
有两个关键节点驱使我开始100%地使用Vim：一是当我理解到Vim命令的语法结构（看第4章）时。二是学会fzf.vim插件时（看第3章）。
第一个，当我了解了Vim命令的语法结构时。这是一个决定性时间节点，我终于理解了Vim用户以前讨论的是什么。我并不需要去学习上百个命令，而仅需要学习一小部分命令，然后就可以凭直觉将它们串起来去做很多事情。
第二个，fzf插件我经常使用，该插件具有类似IDE的模糊文件查找功能。当我学会在Vim中如何使用该功能时，我的编辑效率极大提升，从此再也回不去了。
尽管每一个程序都是不同的。但仔细一想，您会发现您所偏爱的编辑器/IDE总有1个或2个功能是您频繁使用的。也许是模糊查找，也许是跳转至定义，或是快速编译，但不管是什么，快速确认这些功能，然后学会如何在Vim中实现它们（一般情况下Vim都能办到）。您的编辑速度将会获得一个巨大的提高。
当您使用Vim可以达到您原来50%的效率时，就是时候完全使用Vim了。
如何阅读本指南 本指南注重实效性。为了更好地在Vim中工作，您需要锻炼您的肌肉记忆，而不是大脑理解。
想学会骑自行车，您并不需要首先阅读一本骑车教程。您需要做的是骑上一辆真正的自行车，然后在实践中探索。
您需要输入每一条本指南中提到的命令。不仅如此，您还需要不断地重复，然后尝试命令的不同联合方式。想了解您刚学到命令具有什么功能，:help命令和搜索引擎是您最好的帮手。但您的目标并不是去掌握关于一条命令的全部信息，而是能够本能地、自然地使用该命令。
我本想尽可能地使本指南的知识点呈线性化展示，但有些概念还是不得不违反顺序。比如在第1章，我就提到了替换命令（:s），这个知识点要到第12章才讲。作为补救，不管是什么概念，如果被提前讲到了，我将为它提供一个简短的说明，原谅我吧。
更多帮助 关于Vim帮助手册有一个额外的小技巧：假设您想了解关于Ctrl-p在插入模式时的功能。如果您仅仅查找:h CTRL-P，您将被导航到普通模式下关于Ctrl-P的介绍页面，这并不是您想要的信息。在这种情况下，改为查找:h i_CTRL-P。添加的i_表示插入模式。注意它属于哪个模式。
语法 大部分命令或涉及的代码片段都使用代码样式（like this）。
字符串使用双引号包括（&amp;ldquo;like this&amp;rdquo;）。
Vim命令可以使用简写。比如，:join可以简写为:j。本指南全文中，我将混合使用简写和全称。对于本指南不经常使用的命令，我将使用全称。而对于经常使用的命令，我将使用简写。我为这不一致性道歉。总之，不管什么时候当您看到一个新命令，记得使用:help查看它的简写。
Vimrc 在本指南的很多地方，我将提到vimrc选项。如果您是初学者，可以把vimrc看做一个配置文件。
Vimrc直到第21章才讲。为了保持清晰，我将在这里简要的介绍如何配置Vimrc。
假设您需要设置number选项，即显示行号(set number)。如果您还没有vimrc文件，就创建一个。它通常位于根目录，名字为.vimrc。根据您的操作系统，该位置可能不同。在macOS，我将它放在~/.vimrc。要查看您的vimrc文件应该放在哪里，查看:h vimrc。
在vimrc文件内，添加一行set number。保存(:w)，然后激活这一配置(:source %)。您将会在每一行的的左侧看到行号。
另外，如果您不想永久配置一个选项，您可以在Vim命令行使用set命令，输入:set number。这种方法的缺点是设置是临时的。当您关闭Vim，该配置选项将消失。
因为我们学的是Vim而不是Vi，有一个设置您必须启用，这就是nocompatible选项。在您的vimrc文件中添加set nocompatible。如果启用compatible选项，许多Vim特有的功能将会被禁止。
一般而言，不管什么时候只要有一段内容涉及vimrc选项，只需要将该选项添加到vimrc中就好了，然后保存并激活相关选项。
未来计划，错误，问题 期待未来有更多的更新。如果您发现任何错误或有什么疑问，请随意提交。
我计划近期再发布一些更新章节，敬请关注。
更多关于Vim的技巧 要了解Vim更多的信息，请关注我的推特（需墙）。@learnvim.
感谢 感谢Bram Moleenar编写了Vim，没有Vim就不会有本指南。感谢我的妻子当我编写本指南时表现的耐心和支持。感谢所有的贡献者contributors，感谢Vim社区，还有很多其他没有提及的人们。
谢谢，您们使得这件工作更加有趣。:)
链接 目录 下一部分 Ch 1 - 起步 </description>
    </item>
    
    <item>
      <title>Learn Vim</title>
      <link>https://xxaxx007.github.io/posts/learn-vim/</link>
      <pubDate>Fri, 16 Dec 2022 18:08:12 +0800</pubDate>
      
      <guid>https://xxaxx007.github.io/posts/learn-vim/</guid>
      <description>第0章 请先阅读 为什么写这本教程 有很多途径可以学习Vim:vimtutor就是一个很好的途径，另外还有Vim自带的帮助手册（:help查看）包含了所有需要的参考信息。
但是在日常使用中，对于绝大部分用户的需求而言，vimtutor讲得太浅不能满足需要，而:help所提供的信息又有很多是用不上的。本指南尝试在两者之间搭一座桥，仅重点介绍关键功能，使您尽可能在最短的时间内掌握Vim中最有用的知识。
绝大部分情况下，您并不会使用到Vim100%的功能。您可能仅仅需要掌握其中20%就可以成为一名娴熟的Vim用户。本指南将为您展示Vim中最有用的功能。
本指南带有作者强烈的个人观点。它涵盖了作者在使用Vim的过程中经常用到的技巧。章节按照作者认为的，最适合初学者最符合逻辑的顺序排列。
本指南包含大量示例。当学习一个新技能时，示例是不可缺少的，大量的示例可以更有效的巩固所学概念。
部分读者可能好奇为什么要学习Vimscript？我刚使用Vim时，仅仅满足于知道如何使用Vim。随着时间推移，我越来越需要使用Vimscript去写一些自定义命令，以满足特殊的编辑需要。在您使用Vim的过程中，您早晚会接触Vimscript。所以为什么不早点学呢？Vimscript是一门小巧的脚本语言，仅需要本指南的四个章节，您就可以学到它的基础知识。
您当然可以继续使用Vim而不了解任何Vimscript知识，但了解它可以使您更加擅长Vim。
本指南同时为初学者和高级Vim用户撰写。它从宽泛而简单的概念开始讲，最后落在特殊的、进阶的技巧上。如果您已经是一名进阶用户，我还是鼓励您从头到尾阅读本指南，因为您将了解到一些新的东西。
如何从其他编辑器过渡到Vim 学习Vim的过程虽然很困难,但很具有成就感。有两种方法去学习Vim：
强制转换地使用Vim 循序渐进地使用Vim 强制转换为Vim意味着从现在开始只使用Vim，停止使用您以前使用的任何编辑器/IDE。本方法的缺点是在前一周或两周，您将面临编辑效率的严重下降。如果您是一名专职程序员，本方法可能不太行得通。这也是为什么对于大部分读者而言，我认为过渡到Vim最好是循序渐进地使用Vim。
想要循序渐进地使用Vim，应该在最开始的两个星期，每天花1个小时使用Vim作为您的编辑器，而剩下的时间您可以继续使用其他编辑器。许多现代编辑器都带有Vim插件。我刚开始时，每天花1个小时使用VSCode的Vim插件。逐渐地，我增加使用Vim插件的时间，直到最终完全使用Vim插件。记住，这些插件仅仅模拟了Vim中的一小部分功能。要想体验Vim中比如Vimscript、命令行命令（Ex模式）、以及外部集成命令的强大功能，您必须使用Vim自身。
有两个关键节点驱使我开始100%地使用Vim：一是当我理解到Vim命令的语法结构（看第4章）时。二是学会fzf.vim插件时（看第3章）。
第一个，当我了解了Vim命令的语法结构时。这是一个决定性时间节点，我终于理解了Vim用户以前讨论的是什么。我并不需要去学习上百个命令，而仅需要学习一小部分命令，然后就可以凭直觉将它们串起来去做很多事情。
第二个，fzf插件我经常使用，该插件具有类似IDE的模糊文件查找功能。当我学会在Vim中如何使用该功能时，我的编辑效率极大提升，从此再也回不去了。
尽管每一个程序都是不同的。但仔细一想，您会发现您所偏爱的编辑器/IDE总有1个或2个功能是您频繁使用的。也许是模糊查找，也许是跳转至定义，或是快速编译，但不管是什么，快速确认这些功能，然后学会如何在Vim中实现它们（一般情况下Vim都能办到）。您的编辑速度将会获得一个巨大的提高。
当您使用Vim可以达到您原来50%的效率时，就是时候完全使用Vim了。
如何阅读本指南 本指南注重实效性。为了更好地在Vim中工作，您需要锻炼您的肌肉记忆，而不是大脑理解。
想学会骑自行车，您并不需要首先阅读一本骑车教程。您需要做的是骑上一辆真正的自行车，然后在实践中探索。
您需要输入每一条本指南中提到的命令。不仅如此，您还需要不断地重复，然后尝试命令的不同联合方式。想了解您刚学到命令具有什么功能，:help命令和搜索引擎是您最好的帮手。但您的目标并不是去掌握关于一条命令的全部信息，而是能够本能地、自然地使用该命令。
我本想尽可能地使本指南的知识点呈线性化展示，但有些概念还是不得不违反顺序。比如在第1章，我就提到了替换命令（:s），这个知识点要到第12章才讲。作为补救，不管是什么概念，如果被提前讲到了，我将为它提供一个简短的说明，原谅我吧。
更多帮助 关于Vim帮助手册有一个额外的小技巧：假设您想了解关于Ctrl-p在插入模式时的功能。如果您仅仅查找:h CTRL-P，您将被导航到普通模式下关于Ctrl-P的介绍页面，这并不是您想要的信息。在这种情况下，改为查找:h i_CTRL-P。添加的i_表示插入模式。注意它属于哪个模式。
语法 大部分命令或涉及的代码片段都使用代码样式（like this）。
字符串使用双引号包括（&amp;ldquo;like this&amp;rdquo;）。
Vim命令可以使用简写。比如，:join可以简写为:j。本指南全文中，我将混合使用简写和全称。对于本指南不经常使用的命令，我将使用全称。而对于经常使用的命令，我将使用简写。我为这不一致性道歉。总之，不管什么时候当您看到一个新命令，记得使用:help查看它的简写。
Vimrc 在本指南的很多地方，我将提到vimrc选项。如果您是初学者，可以把vimrc看做一个配置文件。
Vimrc直到第21章才讲。为了保持清晰，我将在这里简要的介绍如何配置Vimrc。
假设您需要设置number选项，即显示行号(set number)。如果您还没有vimrc文件，就创建一个。它通常位于根目录，名字为.vimrc。根据您的操作系统，该位置可能不同。在macOS，我将它放在~/.vimrc。要查看您的vimrc文件应该放在哪里，查看:h vimrc。
在vimrc文件内，添加一行set number。保存(:w)，然后激活这一配置(:source %)。您将会在每一行的的左侧看到行号。
另外，如果您不想永久配置一个选项，您可以在Vim命令行使用set命令，输入:set number。这种方法的缺点是设置是临时的。当您关闭Vim，该配置选项将消失。
因为我们学的是Vim而不是Vi，有一个设置您必须启用，这就是nocompatible选项。在您的vimrc文件中添加set nocompatible。如果启用compatible选项，许多Vim特有的功能将会被禁止。
一般而言，不管什么时候只要有一段内容涉及vimrc选项，只需要将该选项添加到vimrc中就好了，然后保存并激活相关选项。
未来计划，错误，问题 期待未来有更多的更新。如果您发现任何错误或有什么疑问，请随意提交。
我计划近期再发布一些更新章节，敬请关注。
更多关于Vim的技巧 要了解Vim更多的信息，请关注我的推特（需墙）。@learnvim.
感谢 感谢Bram Moleenar编写了Vim，没有Vim就不会有本指南。感谢我的妻子当我编写本指南时表现的耐心和支持。感谢所有的贡献者contributors，感谢Vim社区，还有很多其他没有提及的人们。
谢谢，您们使得这件工作更加有趣。:)
链接 目录 下一部分 Ch 1 - 起步 </description>
    </item>
    
    <item>
      <title>Daily</title>
      <link>https://xxaxx007.github.io/daily/</link>
      <pubDate>Fri, 16 Dec 2022 18:07:20 +0800</pubDate>
      
      <guid>https://xxaxx007.github.io/daily/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Test</title>
      <link>https://xxaxx007.github.io/blog/test/</link>
      <pubDate>Fri, 16 Dec 2022 17:14:40 +0800</pubDate>
      
      <guid>https://xxaxx007.github.io/blog/test/</guid>
      <description>just test it. 部署新主题 添加评论 </description>
    </item>
    
    <item>
      <title>Ask Question</title>
      <link>https://xxaxx007.github.io/blog/ask-question/</link>
      <pubDate>Fri, 16 Dec 2022 17:00:01 +0800</pubDate>
      
      <guid>https://xxaxx007.github.io/blog/ask-question/</guid>
      <description>提问的智慧 原文链接: https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md
LICENSE: https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/LICENSE
How To Ask Questions The Smart Way
Copyright © 2001,2006,2014 Eric S. Raymond, Rick Moen
本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。
原文网址：http://www.catb.org/~esr/faqs/smart-questions.html
Copyleft 2001 by D.H.Grand(nOBODY/Ginux), 2010 by Gasolin, 2015 by Ryan Wu
本中文指南是基于原文 3.10 版以及 2010 年由 Gasolin 所翻译版本的最新翻译
声明 许多项目在他们的使用协助/说明网页中链接了本指南，这么做很好，我们也鼓励大家都这么做。但如果你是负责管理这个项目网页的人，请在超链接附近的显著位置上注明：
本指南不提供此项目的实际支持服务！
我们已经深刻领教到少了上述声明所带来的痛苦。因为少了这点声明，我们不停地被一些白痴纠缠。这些白痴认为既然我们发布了这本指南，那么我们就有责任解决世上所有的技术问题。
如果你因寻求某些帮助而阅读本指南，并在离开时还觉得可以从本文作者这里得到直接帮助，那你就是我们之前说的那些白痴之一。别问我们问题，我们只会忽略你。我们在这本指南中想教你如何从那些真正懂得你所遇到的软件或硬件问题的人处取得协助，而 99% 的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。
简介 在黑客的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。
现在开源（Open Source）软件已经相当盛行，您通常可以从其他更有经验的用户那里获得与黑客一样好的答案，这是件好事；和黑客相比，用户们往往对那些新手常遇到的问题更宽容一些。尽管如此，以我们在此推荐的方式对待这些有经验的用户通常也是从他们那里获得有用答案的最有效方式。
首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，“好问题！”是诚挚的大力称赞。
尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。
我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 —— 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 失败者（撸瑟） （由于历史原因，我们有时把它拼作 lusers）。
我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。
我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情地滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效地利用时间来回答赢家（winner）的问题。
如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 —— 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。</description>
    </item>
    
    <item>
      <title>How to Ask Questions the Smart Way</title>
      <link>https://xxaxx007.github.io/blog/how-to-ask-questions-the-smart-way/</link>
      <pubDate>Fri, 16 Dec 2022 14:42:57 +0800</pubDate>
      
      <guid>https://xxaxx007.github.io/blog/how-to-ask-questions-the-smart-way/</guid>
      <description>提问的智慧 原文链接: https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md
LICENSE: https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/LICENSE
How To Ask Questions The Smart Way
Copyright © 2001,2006,2014 Eric S. Raymond, Rick Moen
本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。
原文网址：http://www.catb.org/~esr/faqs/smart-questions.html
Copyleft 2001 by D.H.Grand(nOBODY/Ginux), 2010 by Gasolin, 2015 by Ryan Wu
本中文指南是基于原文 3.10 版以及 2010 年由 Gasolin 所翻译版本的最新翻译
声明 许多项目在他们的使用协助/说明网页中链接了本指南，这么做很好，我们也鼓励大家都这么做。但如果你是负责管理这个项目网页的人，请在超链接附近的显著位置上注明：
本指南不提供此项目的实际支持服务！
我们已经深刻领教到少了上述声明所带来的痛苦。因为少了这点声明，我们不停地被一些白痴纠缠。这些白痴认为既然我们发布了这本指南，那么我们就有责任解决世上所有的技术问题。
如果你因寻求某些帮助而阅读本指南，并在离开时还觉得可以从本文作者这里得到直接帮助，那你就是我们之前说的那些白痴之一。别问我们问题，我们只会忽略你。我们在这本指南中想教你如何从那些真正懂得你所遇到的软件或硬件问题的人处取得协助，而 99% 的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。
简介 在黑客的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。
现在开源（Open Source）软件已经相当盛行，您通常可以从其他更有经验的用户那里获得与黑客一样好的答案，这是件好事；和黑客相比，用户们往往对那些新手常遇到的问题更宽容一些。尽管如此，以我们在此推荐的方式对待这些有经验的用户通常也是从他们那里获得有用答案的最有效方式。
首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，“好问题！”是诚挚的大力称赞。
尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。
我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 —— 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 失败者（撸瑟） （由于历史原因，我们有时把它拼作 lusers）。
我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。
我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情地滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效地利用时间来回答赢家（winner）的问题。
如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 —— 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。</description>
    </item>
    
    <item>
      <title>Chapter VI: Esmeralda</title>
      <link>https://xxaxx007.github.io/blog/chapter-6/</link>
      <pubDate>Fri, 14 Apr 2017 11:25:05 -0400</pubDate>
      
      <guid>https://xxaxx007.github.io/blog/chapter-6/</guid>
      <description>Esmeralda</description>
    </item>
    
    <item>
      <title>Chapter V: Quasimodo</title>
      <link>https://xxaxx007.github.io/blog/chapter-5/</link>
      <pubDate>Thu, 13 Apr 2017 11:15:58 -0400</pubDate>
      
      <guid>https://xxaxx007.github.io/blog/chapter-5/</guid>
      <description>Quasimodo</description>
    </item>
    
    <item>
      <title>Chapter IV: Master Jacques Coppenole</title>
      <link>https://xxaxx007.github.io/blog/chapter-4/</link>
      <pubDate>Wed, 12 Apr 2017 11:14:48 -0400</pubDate>
      
      <guid>https://xxaxx007.github.io/blog/chapter-4/</guid>
      <description>Master Jacques Coppenole</description>
    </item>
    
    <item>
      <title>Chapter III: Monsieur the Cardinal</title>
      <link>https://xxaxx007.github.io/blog/chapter-3/</link>
      <pubDate>Tue, 11 Apr 2017 11:13:32 -0400</pubDate>
      
      <guid>https://xxaxx007.github.io/blog/chapter-3/</guid>
      <description>Monsieur the Cardinal</description>
    </item>
    
    <item>
      <title>Chapter II: Pierre Gringoire</title>
      <link>https://xxaxx007.github.io/blog/chapter-2/</link>
      <pubDate>Mon, 10 Apr 2017 11:00:59 -0400</pubDate>
      
      <guid>https://xxaxx007.github.io/blog/chapter-2/</guid>
      <description>Pierre Gringoire</description>
    </item>
    
    <item>
      <title>Chapter I: The Grand Hall</title>
      <link>https://xxaxx007.github.io/blog/chapter-1/</link>
      <pubDate>Sun, 09 Apr 2017 10:58:08 -0400</pubDate>
      
      <guid>https://xxaxx007.github.io/blog/chapter-1/</guid>
      <description>The Grand Hall</description>
    </item>
    
    
    <item>
      <title>关于</title>
      <link>https://xxaxx007.github.io/%E5%85%B3%E4%BA%8E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xxaxx007.github.io/%E5%85%B3%E4%BA%8E/</guid>
      <description>A few years ago, while visiting or, rather, rummaging about Notre-Dame, the author of this book found, in an obscure nook of one of the towers, the following word, engraved by hand upon the wall: —ANANKE.</description>
    </item>
    
  </channel>
</rss>
